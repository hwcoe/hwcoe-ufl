// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@use "sass:math";

@mixin clearfix() {
	&:before,
	&:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
}

// TRANSITIONS
// --------------------------------------------------
@mixin trans($property){
	transition: $property 0.5s $cbTrans;
}

// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
	margin-right: auto;
	margin-left: auto;
	padding-left:  ($grid-gutter-width * 0.5);
	padding-right: ($grid-gutter-width * 0.5);
	@include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
	margin-left:  math.div($gutter, -2);
	margin-right: math.div($gutter, -2);
	@include clearfix();
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	float: left;
	width: percentage(math.div($columns, $grid-columns));
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter * 0.5);
	padding-right: ($gutter * 0.5);
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter * 0.5);
	padding-right: ($gutter * 0.5);

	// Calculate width based on number of columns available
	@media (min-width: $screen-sm) {
		float: left;
		width: percentage(math.div($columns, $grid-columns));
	}
}

// Generate the small column offsets
@mixin make-sm-column-offset($columns) {
	@media (min-width: $screen-sm) {
		margin-left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-sm-column-push($columns) {
	@media (min-width: $screen-sm) {
		left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-sm-column-pull($columns) {
	@media (min-width: $screen-sm) {
		right: percentage(math.div($columns, $grid-columns));
	}
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter * 0.5);
	padding-right: ($gutter * 0.5);

	// Calculate width based on number of columns available
	@media (min-width: $screen-md) {
		float: left;
		width: percentage(math.div($columns, $grid-columns));
	}
}

// Generate the large column offsets
@mixin make-md-column-offset($columns) {
	@media (min-width: $screen-md) {
		margin-left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-md-column-push($columns) {
	@media (min-width: $screen-md) {
		left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-md-column-pull($columns) {
	@media (min-width: $screen-md) {
		right: percentage(math.div($columns, $grid-columns));
	}
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  ($gutter * 0.5);
	padding-right: ($gutter * 0.5);

	// Calculate width based on number of columns available
	@media (min-width: $screen-lg) {
		float: left;
		width: percentage(math.div($columns, $grid-columns));
	}
}

// Generate the large column offsets
@mixin make-lg-column-offset($columns) {
	@media (min-width: $screen-lg) {
		margin-left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-lg-column-push($columns) {
	@media (min-width: $screen-lg) {
		left: percentage(math.div($columns, $grid-columns));
	}
}
@mixin make-lg-column-pull($columns) {
	@media (min-width: $screen-lg) {
		right: percentage(math.div($columns, $grid-columns));
	}
}

// RESPONSIVE BREAKPOINTS
// --------------------------------------------------
@mixin break($media) {
	@if $media == small {
		@media (max-width: 767px) { @content; }
	}
	@else if $media == medium {
		@media (min-width: $screen-tablet) and (max-width: 979px) { @content; }
		@media (min-width: $screen-tablet) and (max-width: 1024px) and (orientation: landscape) {@content;}
	}
	@else if $media == mediumLand {
		// 768 to 1024 px
		@media (min-width: $screen-tablet) and (max-width: 1024px) and (orientation: landscape) {@content;}
	}
	@else if $media == mediumPort {
		// 768 to 979 px
		@media (min-width: $screen-tablet) and (max-width: 979px) { @content; } 
	}
	@else if $media == mediumWide {
		@media (min-width: $screen-md) and (max-width: $screen-lg) { @content; } 
	}
	@else if $media == wide {
		@media only screen and (min-width: $screen-lg-desktop) { @content; }
	}
	@else {
		@media (min-width: $media) { @content; }
	}
}

// MOBILE FIRST RESPONSIVE BREAKPOINTS
// --------------------------------------------------
@mixin breakFirst($media) {
	@if $media == medium {
		@media (min-width: $screen-sm) { @content; }
	}
	@else if $media == large {
		@media (min-width: $screen-md) { @content; }
	}
	@else if $media == wide {
		@media (min-width: $screen-lg) { @content; }
	}
	@else {
		@media (min-width: $media) { @content; }
	}
}

// BREAK UP TO A CERTAIN POINT
// --------------------------------------------------
@mixin breakTo($media) {
	@if $media == xsmall {
		@media (max-width: $screen-xs) { @content; }
	}
	@else if $media == medium {
		@media (max-width: $screen-sm) { @content; }
	}
	@else if $media == large {
		@media (max-width: $screen-md) { @content; }
	}
	@else if $media == wide {
		@media (max-width: $screen-lg) { @content; }
	}
}
